/**
 * KANAPL
 *
 * Copyright (c) 2019 Yuichiro MORIGUCHI
 *
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 **/
/*
 * This test case is described for Jasmine.
 */
describe("KANAPL", function () {
    function isNumber(anObject) {
        return typeof anObject === "number";
    }

    function isString(anObject) {
        return typeof anObject === "string";
    }

    function isArray(anObject) {
        return Object.prototype.toString.call(anObject) === '[object Array]';
    }

    function ok(env, program, expected) {
        var result = env.eval(program);

        expect(result).toEqual(expected);
    }

    function round(array0, precision) {
        var result = [],
            i;

        if(isArray(array0)) {
            for(i = 0; i < array0.length; i++) {
                result[i] = round(array0[i], precision);
            }
            return result;
        } else if(array0 === 0) {
            return 0;
        } else if(isNumber(array0)) {
            result = Math.round(array0 * Math.pow(10, precision)) / Math.pow(10, precision);
            return result;
        } else {
            return array0;
        }
    }

    function okPrec(env, program, precision, expected) {
        var result = env.eval(program);

        result = round(result, precision);
        expect(result).toEqual(expected);
    }

    function emptyEnv() {
        var env = KANAPL();

        env.eval("E←''");
        return env;
    }

    beforeEach(function () {
    });
    describe("scalar functions", function () {
        it("addition", function () {
            var env = KANAPL();

            ok(env, "2+3", 5);
            ok(env, "2+1 2 3 4", [3, 4, 5, 6]);
            ok(env, "1 2 3 4+2", [3, 4, 5, 6]);
            ok(env, "2+2 3ρ1 2 3 4 5 6", [[3, 4, 5], [6, 7, 8]]);
            ok(env, "(1 2 3 4)+2 3 4 5", [3, 5, 7, 9]);
            ok(env, "(2 3ρ2 3 4 5 6 7)+2 3ρ1 2 3 4 5 6", [[3, 5, 7], [9, 11, 13]]);
        });

        it("subtraction", function () {
            var env = KANAPL();

            ok(env, "2-3", -1);
            ok(env, "2-1 2 3 4", [1, 0, -1, -2]);
            ok(env, "1 2 3 4-2", [-1, 0, 1, 2]);
            ok(env, "2-2 3ρ1 2 3 4 5 6", [[1, 0, -1], [-2, -3, -4]]);
            ok(env, "(1 2 3 4)-2 3 4 5", [-1, -1, -1, -1]);
            ok(env, "(2 3ρ2 3 4 5 6 7)-2 3ρ1 2 3 4 5 6", [[1, 1, 1], [1, 1, 1]]);
        });

        it("multiplication", function () {
            var env = KANAPL();

            ok(env, "2×3", 6);
            ok(env, "2×1 2 3 4", [2, 4, 6, 8]);
            ok(env, "1 2 3 4×2", [2, 4, 6, 8]);
            ok(env, "2×2 3ρ1 2 3 4 5 6", [[2, 4, 6], [8, 10, 12]]);
            ok(env, "(1 2 3 4)×2 3 4 5", [2, 6, 12, 20]);
            ok(env, "(2 3ρ2 3 4 5 6 7)×2 3ρ1 2 3 4 5 6", [[2, 6, 12], [20, 30, 42]]);
        });

        it("division", function () {
            var env = KANAPL();

            ok(env, "3÷2", 1.5);
            ok(env, "2÷1 2 4 8", [2, 1, 0.5, 0.25]);
            ok(env, "1 2 3 4÷2", [0.5, 1, 1.5, 2]);
            ok(env, "(2 3ρ1 2 3 4 5 6)÷2", [[0.5, 1, 1.5], [2, 2.5, 3]]);
            ok(env, "(1 2 3 4)÷2 4 2 4", [0.5, 0.5, 1.5, 1]);
            ok(env, "(2 3ρ1 2 3 4 5 6)÷2 3ρ1 2 3 4 5 6", [[1, 1, 1], [1, 1, 1]]);
        });

        it("negate", function() {
            var env = KANAPL();

            ok(env, "-2", -2);
            ok(env, "-1 2 3 4", [-1, -2, -3, -4]);
            ok(env, "-2 3ρ1 2 3 4 5 6", [[-1, -2, -3], [-4, -5, -6]]);
        });

        it("signum", function() {
            var env = KANAPL();

            ok(env, "×2", 1);
            ok(env, "×2 0 ￣2", [1, 0, -1]);
            ok(env, "×2 3ρ2 2 0 ￣2 2 3", [[1, 1, 0], [-1, 1, 1]]);
        });

        it("invertion", function() {
            var env = KANAPL();

            ok(env, "÷2", 0.5);
            ok(env, "÷1 2 4", [1, 0.5, 0.25]);
            ok(env, "÷2 3ρ1 2 4", [[1, 0.5, 0.25], [1, 0.5, 0.25]]);
        });

        it("modulo", function() {
            var env = KANAPL();

            ok(env, "3|4", 1);
            ok(env, "3|2 3 ￣4 ￣5", [2, 0, 2, 1]);
            ok(env, "￣3|4 ￣5", [-2, -2]);
            ok(env, "(2 3 4 5)|3", [1, 0, 3, 3]);
            ok(env, "3|2 3ρ3 4 5", [[0, 1, 2], [0, 1, 2]]);
            ok(env, "(2 3 4 5)|3 4 5 6", [1, 1, 1, 1]);
            ok(env, "(2 3ρ1 2 3 4 5 6)|2 3ρ2 3 4 5 6 6.5", [[0, 1, 1], [1, 1, 0.5]]);
        });

        it("absolute value", function() {
            var env = KANAPL();

            ok(env, "|2", 2);
            ok(env, "|2 0 ￣2 1", [2, 0, 2, 1]);
            ok(env, "|2 3ρ2 0 ￣2", [[2, 0, 2], [2, 0, 2]]);
        });

        it("maximum", function() {
            var env = KANAPL();

            ok(env, "2「3", 3);
            ok(env, "2「1 2 3", [2, 2, 3]);
            ok(env, "1 2 4「3", [3, 3, 4]);
            ok(env, "(1 3 4 5)「2 2 3 6", [2, 3, 4, 6]);
            ok(env, "3「2 3ρ1 3 4", [[3, 3, 4], [3, 3, 4]]);
            ok(env, "(2 3ρ1 2 3)「2 3ρ3 2 1", [[3, 2, 3], [3, 2, 3]]);
        });

        it("minimum", function() {
            var env = KANAPL();

            ok(env, "2」3", 2);
            ok(env, "2」1 2 3", [1, 2, 2]);
            ok(env, "1 2 3」2", [1, 2, 2]);
            ok(env, "(1 3 4 5)」2 2 3 4", [1, 2, 3, 4]);
            ok(env, "3」2 3ρ1 3 4", [[1, 3, 3], [1, 3, 3]]);
            ok(env, "(2 3ρ1 2 3)」2 3ρ3 2 1", [[1, 2, 1], [1, 2, 1]]);
        });

        it("ceiling", function() {
            var env = KANAPL();

            ok(env, "「3.4", 4);
            ok(env, "「2.3 2.5 2.7 3 ￣2.7 ￣2", [3, 3, 3, 3, -2, -2]);
            ok(env, "「2 3ρ1.2 1.4 1.6", [[2, 2, 2], [2, 2, 2]]);
        });

        it("floor", function() {
            var env = KANAPL();

            ok(env, "」3.4", 3);
            ok(env, "」2.3 2.5 2.7 2 ￣2.7 ￣2", [2, 2, 2, 2, -3, -2]);
            ok(env, "」2 3ρ1.2 1.4 1.6", [[1, 1, 1], [1, 1, 1]]);
        });

        it("power", function() {
            var env = KANAPL();

            ok(env, "2★3", 8);
            ok(env, "2★1 2 3", [2, 4, 8]);
            ok(env, "2★0 ￣1 ￣2 ￣3", [1, 0.5, 0.25, 0.125]);
            ok(env, "￣2★1 2 3", [-2, 4, -8]);
            ok(env, "￣2★0 ￣1 ￣2 ￣3", [1, -0.5, 0.25, -0.125]);
            ok(env, "(2 2.5 3)★3", [8, Math.pow(2.5, 3), 27]);
            ok(env, "(1 2 3)★(2 3 4)", [1, 8, 81]);
            ok(env, "(2 3ρ1 2 3)★(2 3ρ1 2 3)", [[1, 4, 27], [1, 4, 27]]);
        });

        it("exp", function() {
            var env = KANAPL();

            ok(env, "★1", Math.E);
            ok(env, "★1 ￣1 0", [Math.E, Math.exp(-1), 1]);
            ok(env, "★2 3ρ1 2 3", [[Math.E, Math.exp(2), Math.exp(3)], [Math.E, Math.exp(2), Math.exp(3)]]);
        });

        it("logn", function() {
            var env = KANAPL();

            ok(env, "2☆8", 3);
            ok(env, "2☆1 2 4", [0, 1, 2]);
            ok(env, "(2 4 16)☆16", [4, 2, 1]);
            ok(env, "(2 4 16)☆4 16 256", [2, 2, 2]);
            ok(env, "(2 3ρ2 4 16)☆2 3ρ4 16 256", [[2, 2, 2], [2, 2, 2]]);
        });

        it("log", function() {
            var env = KANAPL();

            ok(env, "☆2", Math.log(2));
            ok(env, "☆2 3 4", [Math.log(2), Math.log(3), Math.log(4)]);
            ok(env, "☆2 3ρ2 3 4", [[Math.log(2), Math.log(3), Math.log(4)], [Math.log(2), Math.log(3), Math.log(4)]]);
        });

        it("trigonometric functions", function() {
            var env = KANAPL();

            ok(env, "0〇1 0.5 0", [0, Math.sqrt(0.75), 1]);
            ok(env, "1〇1", Math.sin(1));
            ok(env, "2〇1", Math.cos(1));
            ok(env, "3〇1", Math.tan(1));
            ok(env, "4〇1", Math.sqrt(2));
            ok(env, "5〇1", Math.sinh(1));
            ok(env, "6〇1", Math.cosh(1));
            ok(env, "7〇1", Math.tanh(1));
            ok(env, "￣1〇￣1 0.5 1", [Math.asin(-1), Math.asin(0.5), Math.asin(1)]);
            ok(env, "￣2〇￣1 0.5 1", [Math.acos(-1), Math.acos(0.5), Math.acos(1)]);
            ok(env, "￣3〇1", Math.atan(1));
            ok(env, "￣4〇1 2", [0, Math.sqrt(3)]);
            ok(env, "￣5〇1 2", [Math.asinh(1), Math.asinh(2)]);
            ok(env, "￣6〇1 2", [Math.acosh(1), Math.acosh(2)]);
            ok(env, "￣7〇1 2", [Math.atanh(1), Math.atanh(2)]);
            ok(env, "1〇1 1 1", [Math.sin(1), Math.sin(1), Math.sin(1)]);
            ok(env, "1〇2 3ρ1 1 1", [[Math.sin(1), Math.sin(1), Math.sin(1)], [Math.sin(1), Math.sin(1), Math.sin(1)]]);
        });

        it("pi", function() {
            var env = KANAPL();

            ok(env, "〇2", 2 * Math.PI);
            ok(env, "〇2 3 4", [2 * Math.PI, 3 * Math.PI, 4 * Math.PI]);
            ok(env, "〇2 3ρ2 3 4", [[2 * Math.PI, 3 * Math.PI, 4 * Math.PI], [2 * Math.PI, 3 * Math.PI, 4 * Math.PI]]);
        });

        it("factorial", function() {
            var env = KANAPL();

            ok(env, "!3", 6);
            ok(env, "!￣1.4 0 0.4 1 1.4 2.4", [-3.7229806220320456, 1, 0.8872638175030746, 1, 1.2421693445043056, 2.9812064268103313]);
            ok(env, "!2 3ρ0 1 4", [[1, 1, 24], [1, 1, 24]]);
        });

        it("combination", function() {
            var env = KANAPL();

            ok(env, "2!3", 3);
            ok(env, "2!3 4 5", [3, 6, 10]);
            ok(env, "0 1 2 3!3", [1, 3, 3, 1]);
            ok(env, "(0 1 2)!3 4 5", [1, 4, 10]);
            ok(env, "(2 3ρ0 1 2)!2 3ρ3 4 5", [[1, 4, 10], [1, 4, 10]]);
        });

        it("relation", function() {
            var env = KANAPL();

            ok(env, "3<4", 1);
            ok(env, "3>4", 0);
            ok(env, "3≦4", 1);
            ok(env, "3≧4", 0);
            ok(env, "3=4", 0);
            ok(env, "3≠4", 1);
            ok(env, "3<2 3 4", [0, 0, 1]);
            ok(env, "3>2 3 4", [1, 0, 0]);
            ok(env, "3≦2 3 4", [0, 1, 1]);
            ok(env, "3≧2 3 4", [1, 1, 0]);
            ok(env, "3=2 3 4", [0, 1, 0]);
            ok(env, "3≠2 3 4", [1, 0, 1]);
            ok(env, "2 3 4<4", [1, 1, 0]);
            ok(env, "2 3 4>4", [0, 0, 0]);
            ok(env, "2 3 4≦4", [1, 1, 1]);
            ok(env, "2 3 4≧4", [0, 0, 1]);
            ok(env, "2 3 4=4", [0, 0, 1]);
            ok(env, "2 3 4≠4", [1, 1, 0]);
            ok(env, "2 3 4<4 3 2", [1, 0, 0]);
            ok(env, "2 3 4>4 3 2", [0, 0, 1]);
            ok(env, "2 3 4≦4 3 2", [1, 1, 0]);
            ok(env, "2 3 4≧4 3 2", [0, 1, 1]);
            ok(env, "2 3 4=4 3 2", [0, 1, 0]);
            ok(env, "2 3 4≠4 3 2", [1, 0, 1]);
            ok(env, "(2 3ρ2 3 4)<2 3ρ4 3 2", [[1, 0, 0], [1, 0, 0]]);
            ok(env, "(2 3ρ2 3 4)>2 3ρ4 3 2", [[0, 0, 1], [0, 0, 1]]);
            ok(env, "(2 3ρ2 3 4)≦2 3ρ4 3 2", [[1, 1, 0], [1, 1, 0]]);
            ok(env, "(2 3ρ2 3 4)≧2 3ρ4 3 2", [[0, 1, 1], [0, 1, 1]]);
            ok(env, "(2 3ρ2 3 4)=2 3ρ4 3 2", [[0, 1, 0], [0, 1, 0]]);
            ok(env, "(2 3ρ2 3 4)≠2 3ρ4 3 2", [[1, 0, 1], [1, 0, 1]]);
            ok(env, "'Nina'='Hina'", [0, 1, 1, 1]);
            ok(env, "'Nina'≠'Hina'", [1, 0, 0, 0]);
        });

        it("logical function", function() {
            var env = KANAPL();

            ok(env, "2∧3", 1);
            ok(env, "2∨3", 1);
            ok(env, "2†3", 0);
            ok(env, "2‡3", 0);
            ok(env, "2∧3 0", [1, 0]);
            ok(env, "2∨3 0", [1, 1]);
            ok(env, "2†3 0", [0, 1]);
            ok(env, "2‡3 0", [0, 0]);
            ok(env, "(2 0)∧3", [1, 0]);
            ok(env, "(2 0)∨3", [1, 1]);
            ok(env, "(2 0)†3", [0, 1]);
            ok(env, "(2 0)‡3", [0, 0]);
            ok(env, "(2 2 0 0)∧3 0 3 0", [1, 0, 0, 0]);
            ok(env, "(2 2 0 0)∨3 0 3 0", [1, 1, 1, 0]);
            ok(env, "(2 2 0 0)†3 0 3 0", [0, 1, 1, 1]);
            ok(env, "(2 2 0 0)‡3 0 3 0", [0, 0, 0, 1]);
            ok(env, "(2 4ρ2 2 0 0)∧2 4ρ3 0 3 0", [[1, 0, 0, 0], [1, 0, 0, 0]]);
            ok(env, "(2 4ρ2 2 0 0)∨2 4ρ3 0 3 0", [[1, 1, 1, 0], [1, 1, 1, 0]]);
            ok(env, "(2 4ρ2 2 0 0)†2 4ρ3 0 3 0", [[0, 1, 1, 1], [0, 1, 1, 1]]);
            ok(env, "(2 4ρ2 2 0 0)‡2 4ρ3 0 3 0", [[0, 0, 0, 1], [0, 0, 0, 1]]);
        });

        it("logical not", function() {
            var env = KANAPL();

            ok(env, "~3", 0);
            ok(env, "~2 0 1", [0, 1, 0]);
            ok(env, "~2 3ρ2 0 1", [[0, 1, 0], [0, 1, 0]]);
        });
    });

    describe("compound operators", function () {
        it("reduce", function() {
            var env = KANAPL();

            ok(env, "+/1 2 3", 6);
            ok(env, "-/1 2 3", -4);
            ok(env, "×/1 2 3", 6);
            ok(env, "÷/1 2 4", 0.125);
            ok(env, "|/2 3 4", 0);
            ok(env, "「/2 8 3", 8);
            ok(env, "」/2 8 3", 2);
            ok(env, "★/2 2 3", 64);
            ok(env, "〇/1 2", Math.sin(2));
            ok(env, "☆/10 1000 3", 1);
            ok(env, "!/2 3", 3);
            ok(env, "∧/2 0 3", 0);
            ok(env, "∨/2 0 3", 1);
            ok(env, "†/2 0 3", 0);
            ok(env, "‡/2 0 3", 0);
            ok(env, "</1 2 3", 1);
            ok(env, "≦/1 2 3", 1);
            ok(env, ">/1 2 3", 0);
            ok(env, "≧/1 2 3", 0);
            ok(env, "=/1 2 3", 0);
            ok(env, "≠/1 2 3", 1);
            ok(env, "-/2", 2);
            ok(env, "+/2 3ρ1 2 3 4 5 6", [6, 15]);
            ok(env, "+/[1]2 3ρ1 2 3 4 5 6", [5, 7, 9]);
            ok(env, "+/[2]2 3 2ρ1 2 3 4", [[5, 8], [7, 10]]);
        });

        it("scan", function() {
            var env = KANAPL();

            ok(env, "+\\1 2 3", [1, 3, 6]);
            ok(env, "-\\1 2 3", [1, -1, -4]);
            ok(env, "×\\1 2 3", [1, 2, 6]);
            ok(env, "÷\\1 2 4", [1, 0.5, 0.125]);
            ok(env, "|\\2 3 4", [2, 1, 0]);
            ok(env, "「\\2 8 3", [2, 8, 8]);
            ok(env, "」\\2 8 3", [2, 2, 2]);
            ok(env, "★\\2 2 3", [2, 4, 64]);
            ok(env, "〇\\1 2", [1, Math.sin(2)]);
            ok(env, "☆\\10 10000 4", [10, 4, 1]);
            ok(env, "!\\2 3", [2, 3]);
            ok(env, "∧\\2 0 3", [2, 0, 0]);
            ok(env, "∨\\2 0 3", [2, 1, 1]);
            ok(env, "†\\2 0 3", [2, 1, 0]);
            ok(env, "‡\\2 0 3", [2, 0, 0]);
            ok(env, "<\\1 2 3", [1, 1, 1]);
            ok(env, "≦\\1 2 3", [1, 1, 1]);
            ok(env, ">\\1 2 3", [1, 0, 0]);
            ok(env, "≧\\1 2 3", [1, 0, 0]);
            ok(env, "=\\1 2 3", [1, 0, 0]);
            ok(env, "≠\\1 2 3", [1, 1, 1]);
            ok(env, "-\\2", 2);
            ok(env, "+\\2 3ρ1 2 3 4 5 6", [[1, 3, 6], [4, 9, 15]]);
            ok(env, "+\\[1]2 3ρ1 2 3 4 5 6", [[1, 2, 3], [5, 7, 9]]);
            ok(env, "+\\[2]2 3 2ρ1 2 3 4", [[[1, 2], [4, 6], [5, 8]], [[3, 4], [4, 6], [7, 10]]]);
        });

        it("inner product", function() {
            var env = KANAPL();

            ok(env, "1 2 3+.+1 2 3", 12);
            ok(env, "1 2 3+.-2 3 4", -3);
            ok(env, "1 2 3+.×1 2 3", 14);
            ok(env, "2 4 6+.÷2 2 3", 5);
            ok(env, "2 3 4+.|1 2 3", 6);
            ok(env, "2 8 3+.「3 4 6", 17);
            ok(env, "2 8 3+.」3 4 6", 9);
            ok(env, "1 2 3+.★3 2 1", 8);
            ok(env, "1 2+.〇1 2", Math.sin(1) + Math.cos(2));
            ok(env, "2 4 8+.☆4 16 64", 6);
            ok(env, "2 3+.!3 4", 7);
            ok(env, "1 2 3+.∧2 0 3", 2);
            ok(env, "1 2 3+.∨2 0 3", 3);
            ok(env, "1 2 3+.†2 0 3", 1);
            ok(env, "1 2 3+.‡2 0 3", 0);
            ok(env, "2 8 3+.<3 4 6", 2);
            ok(env, "2 8 3+.≦3 4 6", 2);
            ok(env, "2 8 3+.>3 4 6", 1);
            ok(env, "2 8 3+.≧3 4 6", 1);
            ok(env, "'Nina'+.='Hina'", 3);
            ok(env, "'Nina'+.≠'Hina'", 1);
            ok(env, "1 2 3-.+1 2 3", -8);
            ok(env, "1 2 3×.+1 2 3", 48);
            ok(env, "8 4 2÷.+8 4 2", 0.5);
            ok(env, "2 3|.+1 2", 2);
            ok(env, "2 8 3「.+3 4 6", 12);
            ok(env, "2 8 3」.+3 4 6", 5);
            ok(env, "1 2★.+1 2", 16);
            ok(env, "1 2〇.+1 2", Math.cos(4));
            ok(env, "6 6000☆.+4 4000", 4);
            ok(env, "1 2!.+1 2", 6);
            ok(env, "1 2 3∧.+3 2 1", 1);
            ok(env, "2 8 3∨.+3 4 6", 1);
            ok(env, "1 2 3†.+3 2 1", 1);
            ok(env, "2 8 3‡.+3 4 6", 0);
            ok(env, "2 8 3<.+3 4 6", 1);
            ok(env, "2 8 3≦.+3 4 6", 1);
            ok(env, "2 8 3>.+3 4 6", 0);
            ok(env, "2 8 3≧.+3 4 6", 0);
            ok(env, "2 8 3=.+3 4 6", 0);
            ok(env, "2 8 3≠.+3 4 6", 1);
            ok(env, "1+.+2", 3);
            ok(env, "2+.×1 2 3", 12);
            ok(env, "1 2 3-.×2", -8);
            ok(env, "(2 2ρ1 2 3 4)+.×2 2ρ1 1 1 0", [[3, 1], [7, 3]]);
            ok(env, "(3 2ρ2 3 4)+.×2 3 2ρ2 3 4", [[[10, 15], [20, 10], [15, 20]], [[12, 18], [24, 12], [18, 24]], [[14, 21], [28, 14], [21, 28]]]);
        });

        it("outer product", function() {
            var env = KANAPL();

            ok(env, "1 2・.+1 2", [[2, 3], [3, 4]]);
            ok(env, "1 2・.-1 2", [[0, -1], [1, 0]]);
            ok(env, "1 2・.×1 2", [[1, 2], [2, 4]]);
            ok(env, "1 2・.÷1 2", [[1, 0.5], [2, 1]]);
            ok(env, "1 2・.|1 2", [[0, 0], [1, 0]]);
            ok(env, "1 2・.「1 2", [[1, 2], [2, 2]]);
            ok(env, "1 2・.」1 2", [[1, 1], [1, 2]]);
            ok(env, "1 2・.★1 2", [[1, 1], [2, 4]]);
            ok(env, "1 2・.〇1 2", [[Math.sin(1), Math.sin(2)], [Math.cos(1), Math.cos(2)]]);
            ok(env, "2 4・.☆4 16", [[2, 4], [1, 2]]);
            ok(env, "1 2・.!3 4", [[3, 4], [3, 6]]);
            ok(env, "0 1・.∧0 1", [[0, 0], [0, 1]]);
            ok(env, "0 1・.∨0 1", [[0, 1], [1, 1]]);
            ok(env, "0 1・.†0 1", [[1, 1], [1, 0]]);
            ok(env, "0 1・.‡0 1", [[1, 0], [0, 0]]);
            ok(env, "2 7・.<3 7", [[1, 1], [0, 0]]);
            ok(env, "2 7・.≦3 7", [[1, 1], [0, 1]]);
            ok(env, "2 7・.>3 7", [[0, 0], [1, 0]]);
            ok(env, "2 7・.≧3 7", [[0, 0], [1, 1]]);
            ok(env, "2 7・.=3 7", [[0, 0], [0, 1]]);
            ok(env, "2 7・.≠3 7", [[1, 1], [1, 0]]);
            ok(env, "1・.+2", 3);
            ok(env, "2・.×1 2 3", [2, 4, 6]);
            ok(env, "1 2 3・.×2", [2, 4, 6]);
            ok(env, "(2 2ρ1 2 3)・.×2 2ρ1 1 3", [[[[1, 1], [3, 1]], [[2, 2], [6, 2]]], [[[3, 3], [9, 3]], [[1, 1], [3, 1]]]]);
        });
    });

    describe("mixed functions", function () {
        it("rho", function() {
            var env = KANAPL();

            ok(env, "2 3ρ1 2 3 4 5 6", [[1, 2, 3], [4, 5, 6]]);
            ok(env, "2 3ρ1", [[1, 1, 1], [1, 1, 1]]);
            ok(env, "2 3ρ1 2 3 4", [[1, 2, 3], [4, 1, 2]]);
            ok(env, "2 3 2ρ1 2 3", [[[1, 2], [3, 1], [2, 3]], [[1, 2], [3, 1], [2, 3]]]);
            ok(env, "5ρ1 2 3", [1, 2, 3, 1, 2]);
            ok(env, "5ρ1", [1, 1, 1, 1, 1]);
        });

        it("rank", function() {
            var env = KANAPL();

            ok(env, "ρ1 2 3", 3);
            ok(env, "ρ2 3ρ1", [2, 3]);
            ok(env, "ρ2 3 2 4ρ1", [2, 3, 2, 4]);
            ok(env, "ρ1", []);
            ok(env, "ρρ1", 0);
        });

        it("vectorize", function() {
            var env = KANAPL();

            ok(env, ",2 3ρ1 2 3", [1, 2, 3, 1, 2, 3]);
            ok(env, ",2 3 2ρ1 2 3", [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]);
            ok(env, ",'Nina' 'Hina'", ["N", "i", "n", "a", "H", "i", "n", "a"]);
            ok(env, ",2", [2]);
            ok(env, ",1 2 3", [1, 2, 3]);
        });

        it("concatenate", function() {
            var env = KANAPL();

            ok(env, "2,3", [2, 3]);
            ok(env, "(1 2),3", [1, 2, 3]);
            ok(env, "1,2 3", [1, 2, 3]);
            ok(env, "(1 2),3 4", [1, 2, 3, 4]);
            ok(env, "(2 3ρ1 2 3),2 3ρ4 5 6", [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]);
            ok(env, "(2 3ρ1 2 3),[1]2 3ρ4 5 6", [[1, 2, 3], [1, 2, 3], [4, 5, 6], [4, 5, 6]]);
            ok(env, "(2 3ρ1 2 3),[0.5]2 3ρ4 5 6", [[[1, 2, 3], [1, 2, 3]], [[4, 5, 6], [4, 5, 6]]]);
            ok(env, "(2 3ρ1 2 3),[1.5]2 3ρ4 5 6", [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]);
            ok(env, "(2 3ρ1 2 3),[2.5]2 3ρ4 5 6", [[[1, 4], [2, 5], [3, 6]], [[1, 4], [2, 5], [3, 6]]]);
            ok(env, "(1 2),[0.5]3", [[1, 2], [3, 3]]);
            ok(env, "(1 2),[1.5]3", [[1, 3], [2, 3]]);
            ok(env, "3,[0.5]1 2", [[3, 3], [1, 2]]);
            ok(env, "3,[1.5]1 2", [[3, 1], [3, 2]]);
            ok(env, "(2 2ρ1 2),[0.5]3", [[[1, 2], [1, 2]], [[3, 3], [3, 3]]]);
            ok(env, "(2 2ρ1 2),[1.5]3", [[[1, 2], [3, 3]], [[1, 2], [3, 3]]]);
            ok(env, "(2 2ρ1 2),[2.5]3", [[[1, 3], [2, 3]], [[1, 3], [2, 3]]]);
            ok(env, "3,[0.5]2 2ρ1 2", [[[3, 3], [3, 3]], [[1, 2], [1, 2]]]);
            ok(env, "3,[1.5]2 2ρ1 2", [[[3, 3], [1, 2]], [[3, 3], [1, 2]]]);
            ok(env, "3,[2.5]2 2ρ1 2", [[[3, 1], [3, 2]], [[3, 1], [3, 2]]]);
            ok(env, "(1 2),(2 2ρ3 4)", [[1, 3, 4], [2, 3, 4]]);
            ok(env, "(1 2),[1](2 2ρ3 4)", [[1, 2], [3, 4], [3, 4]]);
            ok(env, "(2 2ρ3 4),[1]1 2", [[3, 4], [3, 4], [1, 2]]);
            ok(env, "(2 2ρ1 2),[1]2 2 2ρ3 4", [[[1, 2], [1, 2]], [[3, 4], [3, 4]], [[3, 4], [3, 4]]]);
        });

        it("pickup", function() {
            var env = KANAPL();

            ok(env, "(1 2 3)[1]", 1);
            ok(env, "(1 2 3)[3 1]", [3, 1]);
            ok(env, "(1 2 3)[]", [1, 2, 3]);
            ok(env, "(3 3ρ1 2 3 4 5 6 7 8 9)[3;2]", 8);
            ok(env, "(3 3ρ1 2 3 4 5 6 7 8 9)[3;2 1]", [8, 7]);
            ok(env, "(3 3ρ1 2 3 4 5 6 7 8 9)[3 1;3 2]", [[9, 8], [3, 2]]);
            ok(env, "(3 3ρ1 2 3 4 5 6 7 8 9)[3 1;]", [[7, 8, 9], [1, 2, 3]]);
            ok(env, "(3 3ρ1 2 3 4 5 6 7 8 9)[;3 1]", [[3, 1], [6, 4], [9, 7]]);
            ok(env, "(3 3ρ1 2 3 4 5 6 7 8 9)[;]", [[1, 2, 3], [4, 5, 6], [7, 8, 9]]);
            ok(env, "(4 5 6)[2 2ρ3 1 1 2]", [[6, 4], [4, 5]]);
            ok(env, "(3 3 3ρ1 2 3 4 5 6 7)[2;3;1]", 2);
            ok(env, "(3 3 3ρ1 2 3 4 5 6 7)[2 3;3 1;1 2]", [[[2, 3], [3, 4]], [[4, 5], [5, 6]]]);
            ok(env, "(3 3 3ρ1 2 3 4 5 6 7)[2;;1 2]", [[3, 4], [6, 7], [2, 3]]);
            ok(env, "(3 3 3ρ1 2 3 4 5 6 7)[;;]", [[[1, 2, 3], [4, 5, 6], [7, 1, 2]], [[3, 4, 5], [6, 7, 1], [2, 3, 4]], [[5, 6, 7], [1, 2, 3], [4, 5, 6]]]);
            ok(env, "(3 3 3ρ1 2 3 4 5 6 7)[2;2 2ρ3 1 2 3;1]", [[2, 3], [6, 2]]);
        });

        it("take", function() {
            var env = KANAPL();

            ok(env, "2↑1 2 3 4 5", [1, 2]);
            ok(env, "￣3↑1 2 3 4 5", [3, 4, 5]);
            ok(env, "0↑1 2 3 4 5", [1, 2, 3, 4, 5]);
            ok(env, "5↑1 2", [1, 2, 0, 0, 0]);
            ok(env, "￣5↑1 2", [0, 0, 0, 1, 2]);
            ok(env, "5↑'Rin'", ["R", "i", "n", " ", " "]);
            ok(env, "￣5↑'Rin'", [" ", " ", "R", "i", "n"]);
            ok(env, "2↑1", [1, 0]);
            ok(env, "￣2 2↑3 3ρ1 2 3 4 5 6 7 8 9", [[4, 5], [7, 8]]);
            ok(env, "￣3 3↑2 2ρ1 2 3 4", [[0, 0, 0], [1, 2, 0], [3, 4, 0]]);
            ok(env, "￣2 2 ￣2↑3 3 3ρ1 2 3 4 5 6", [[[5, 6], [2, 3]], [[2, 3], [5, 6]]]);
            ok(env, "￣3 3 ￣3↑2 2 2ρ1 2 3 4 5 6 7 8", [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 1, 2], [0, 3, 4], [0, 0, 0]], [[0, 5, 6], [0, 7, 8], [0, 0, 0]]]);
        });

        it("drop", function() {
            var env = KANAPL();

            ok(env, "2↓1 2 3 4 5", [3, 4, 5]);
            ok(env, "￣2↓1 2 3 4 5", [1, 2, 3]);
            ok(env, "0↓1 2 3 4 5", [1, 2, 3, 4, 5]);
            ok(env, "5↓1 2", []);
            ok(env, "￣5↓1 2", []);
            ok(env, "￣2↓'Hinako'", ["H", "i", "n", "a"]);
            ok(env, "2↓'Hinako'", ["n", "a", "k", "o"]);
            ok(env, "0↓1", [1]);
            ok(env, "2↓1", []);
            ok(env, "￣1 1↓3 3ρ1 2 3 4 5 6 7 8 9", [[2, 3], [5, 6]]);
            ok(env, "￣2 2↓3 3ρ1 2 3 4 5 6 7 8 9", [[3]]);
            ok(env, "￣3 1↓2 2ρ1 2", []);
            ok(env, "￣1 1 ￣1↓3 3 3ρ1 2 3 4 5", [[[4, 5], [2, 3]], [[3, 4], [1, 2]]]);
            ok(env, "￣2 2 ￣2↓3 3 3ρ1 2 3 4 5", [[[2]]]);
            ok(env, "￣3 1 2↓2 2 2ρ1 2", []);
        });

        it("replicate", function() {
            var env = KANAPL();

            ok(env, "(1 1 1 1 0 0)/'Hinako'", ["H", "i", "n", "a"]);
            ok(env, "(1 0 1)/3 3ρ1 2 3 4 5 6 7 8 9", [[1, 3], [4, 6], [7, 9]]);
            ok(env, "(1 0 1)/[1]3 3ρ1 2 3 4 5 6 7 8 9", [[1, 2, 3], [7, 8, 9]]);
            ok(env, "(1 0 1)/[2]2 3 2ρ1 2 3 4 5 6", [[[1, 2], [5, 6]], [[1, 2], [5, 6]]]);
            ok(env, "3/1", [1, 1, 1]);
            ok(env, "3/1 2", [1, 1, 1, 2, 2, 2]);
            ok(env, "3/2 2ρ1 2", [[1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2]]);
            ok(env, "3/[1]2 2ρ1 2", [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]])
            ok(env, "2/[2]2 2 2ρ1 2 3 4", [[[1, 2], [1, 2], [3, 4], [3, 4]], [[1, 2], [1, 2], [3, 4], [3, 4]]]);
        });

        it("expand", function() {
            var env = KANAPL();

            ok(env, "(1 0 1 0)\\1 1", [1, 0, 1, 0]);
            ok(env, "(1 0 1 0 1 0 1 0)\\'Nina'", ["N", " ", "i", " ", "n", " ", "a", " "]);
            ok(env, "(1 0 1)\\2 2ρ1 2 3 4", [[1, 0, 2], [3, 0, 4]]);
            ok(env, "(1 0 1)\\[1]2 2ρ1 2 3 4", [[1, 2], [0, 0], [3, 4]]);
            ok(env, "(1 0 1)\\[2]2 2 2ρ1 2 3 4 5 6 7 8", [[[1, 2], [0, 0], [3, 4]], [[5, 6], [0, 0], [7, 8]]]);
            ok(env, "(1 0 1)\\2", [2, 0, 2]);
        });

        it("reverse", function() {
            var env = KANAPL();

            ok(env, "φ1 2 3", [3, 2, 1]);
            ok(env, "φ'ANDREW'", ["W", "E", "R", "D", "N", "A"]);
            ok(env, "φ1", 1);
            ok(env, "φ3 3ρ1 2 3 4 5 6 7 8 9", [[3, 2, 1], [6, 5, 4], [9, 8, 7]]);
            ok(env, "φ[1]3 3ρ1 2 3 4 5 6 7 8 9", [[7, 8, 9], [4, 5, 6], [1, 2, 3]]);
            ok(env, "φ[2]2 3 2ρ1 2 3 4 5 6", [[[5, 6], [3, 4], [1, 2]], [[5, 6], [3, 4], [1, 2]]]);
        });

        it("rotate", function() {
            var env = KANAPL();

            ok(env, "1φ2", 2);
            ok(env, "1φ1 2 3", [2, 3, 1]);
            ok(env, "4φ1 2 3", [2, 3, 1]);
            ok(env, "￣1φ1 2 3", [3, 1, 2]);
            ok(env, "￣4φ1 2 3", [3, 1, 2]);
            ok(env, "0φ1 2 3", [1, 2, 3]);
            ok(env, "1 2φ2 3ρ1 2 3 4 5 6", [[2, 3, 1], [6, 4, 5]]);
            ok(env, "1 2φ[1]3 2ρ1 2 3 4 5 6", [[3, 6], [5, 2], [1, 4]]);
            ok(env, "(3 3ρ1 2 ￣2)φ[2]3 3 3ρ1 2 3 4 5 6 7",
                [[[4, 1, 6], [7, 2, 2], [1, 5, 3]], [[6, 3, 1], [2, 4, 4], [3, 7, 5]], [[1, 5, 3], [4, 6, 6], [5, 2, 7]]]);
        });

        it("transpose(monadic)", function() {
            var env = KANAPL();

            ok(env, "〆1", 1);
            ok(env, "〆1 2 3", [1, 2, 3]);
            ok(env, "〆3 3ρ1 2 3 4 5 6 7 8 9", [[1, 4, 7], [2, 5, 8], [3, 6, 9]]);
            ok(env, "〆3 3 3ρ1 2 3 4 5 6 7",
                [[[1, 3, 5], [4, 6, 1], [7, 2, 4]], [[2, 4, 6], [5, 7, 2], [1, 3, 5]], [[3, 5, 7], [6, 1, 3], [2, 4, 6]]]);
        });

        it("transpose(dyadic)", function() {
            var env = KANAPL();

            ok(env, "1〆1 2 3", [1, 2, 3]);
            ok(env, "2 1〆3 3ρ1 2 3 4 5 6 7 8 9", [[1, 4, 7], [2, 5, 8], [3, 6, 9]]);
            ok(env, "1 1〆3 3ρ1 2 3 4 5 6 7 8 9", [1, 5, 9]);
            ok(env, "3 1 2〆2 2 3ρ'ABCDEFGHIJKL'", [[["A", "G"], ["B", "H"], ["C", "I"]], [["D", "J"], ["E", "K"], ["F", "L"]]]);
            ok(env, "2 1 1〆2 2 3ρ'ABCDEFGHIJKL'", [["A", "G"], ["E", "K"]]);
        });

        it("iota", function() {
            var env = KANAPL();

            ok(env, "ι3", [1, 2, 3]);
            ok(env, "'ABCDEF'ι'EDBH'", [5, 4, 2, 7]);
            ok(env, "1 2 3 4ι2", 2);
            ok(env, "'ABCDEF'ι2 4ρ'EDBH'", [[5, 4, 2, 7], [5, 4, 2, 7]]);
        });

        it("element of", function() {
            var env = KANAPL();

            ok(env, "2∈2", 1);
            ok(env, "2∈3", 0);
            ok(env, "'Hinako'∈'Nina'", [0, 1, 1, 1, 0, 0]);
            ok(env, "(2 7 4 9 6)∈(ι5)", [1, 0, 1, 0, 0]);
            ok(env, "(3 3ρ'AFBACKBLP')∈'ABC'", [[1, 0, 1], [1, 1, 0], [1, 0, 0]]);
            ok(env, "'AFBACKBLD'∈2 2ρ'ABCD'", [1, 0, 1, 1, 1, 0, 1, 0, 1]);
            ok(env, "(2 2 2ρ'AFBACKBL')∈2 2ρ'ABCD'", [[[1, 0], [1, 1]], [[1, 0], [1, 0]]]);
            ok(env, "2ε2", 1);
        });

        it("sort", function() {
            var env = KANAPL();

            ok(env, "A←30 50 10 90 70", [30, 50, 10, 90, 70]);
            ok(env, "♯A", [3, 1, 2, 5, 4]);
            ok(env, "A[♯A]", [10, 30, 50, 70, 90]);
            ok(env, "♭A", [4, 5, 2, 1, 3]);
            ok(env, "A[♭A]", [90, 70, 50, 30, 10]);
        });

        it("domino", function() {
            var env = KANAPL();

            okPrec(env, "※2 2ρ3 1 5 2", 8, [[2, -1], [-5, 3]]);
            okPrec(env, "※4 4ρ3 3 ￣5 ￣6 1 2 ￣3 ￣1 2 3 ￣5 ￣3 ￣1 0 0 1", 8,
                [[-0.5, 0, 0.5, -1.5], [1.5, 5, -4.5, 0.5], [1, 3, -3, 0], [-0.5, 0, 0.5, -0.5]]);
            okPrec(env, "※3 3ρ0 2 0 0 0 1 4 0 0", 8, [[0, 0, 0.25], [0.5, 0, 0], [0, 1, 0]]);
            okPrec(env, "(4 5)※2 2ρ3 1 5 2", 8, [3, -5]);
            okPrec(env, "(1 1 1)※3 3ρ0 2 0 0 0 1 4 0 0", 8, [0.25, 0.5, 1]);
            okPrec(env, "(7 6 5 8 7 6 3 4 6)※9 2ρ2 8 3 3 1 5", 8, [1.26553672, 0.56497175]);
        });

        it("encode", function() {
            var env = KANAPL();

            ok(env, "16┬15", 15);
            ok(env, "2 2 2 2┬15", [1, 1, 1, 1]);
            ok(env, "1760 3 12┬75", [2, 0, 3]);
            ok(env, "(3 3ρ1 2 3)┬15", [[0, 1, 1], [0, 1, 2], [0, 1, 0]]);
            ok(env, "(3 3 3ρ7 6 5 3 4 6 2 7)┬15", [[[2, 0, 0], [1, 2, 2], [1, 1, 1]], [[0, 0, 1], [2, 2, 0], [1, 1, 3]], [[0, 1, 0], [2, 0, 3], [1, 3, 0]]]);
            ok(env, "2 2 2 2 2┬1 2 3 4 5", [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0], [1, 0, 1, 0, 1]]);
            ok(env, "(3 3ρ2)┬3 4 6", [[[0, 1, 1], [0, 1, 1], [0, 1, 1]], [[1, 0, 1], [1, 0, 1], [1, 0, 1]], [[1, 0, 0], [1, 0, 0], [1, 0, 0]]]);
            ok(env, "2 2 2┬3 3ρ3 4 6 2 7", [[[0, 1, 1], [0, 1, 0], [1, 1, 0]], [[1, 0, 1], [1, 1, 1], [0, 1, 1]], [[1, 0, 0], [0, 1, 1], [0, 0, 0]]]);
            ok(env, "(3 3ρ7 6 5)┬3 3ρ3 4 6 2 7",
                [[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]],
                    [[[0, 0, 0], [0, 1, 0], [0, 0, 0]], [[0, 0, 1], [0, 1, 0], [0, 1, 0]], [[0, 0, 1], [0, 1, 0], [0, 1, 0]]],
                    [[[3, 4, 6], [2, 0, 3], [4, 6, 2]], [[3, 4, 0], [2, 1, 3], [4, 0, 2]], [[3, 4, 1], [2, 2, 3], [4, 1, 2]]]]);
        });

        it("decode", function() {
            var env = KANAPL();

            ok(env, "16⊥3", 3);
            ok(env, "10⊥7 6 5", 765);
            ok(env, "10⊥3 3ρ7 8 3 6 7 4 5 6 6", [765, 876, 346]);
            ok(env, "10⊥2 2 2ρ7 6 5", [[76, 65], [57, 76]]);
            ok(env, "2 2 2 2⊥1 1 1 1", 15);
            ok(env, "(3 3ρ7 6 5 2 7)⊥3 4 6", [116, 181, 44]);
            ok(env, "(2 2 2ρ7 6 5)⊥2 7", [[19, 21], [17, 19]]);
            ok(env, "3 4 6⊥(3 3ρ7 6 5 2 7)", [186, 191, 164]);
            ok(env, "7 2⊥(2 2 2ρ 7 6 5)", [[20, 17], [17, 20]]);
        });

        it("execute", function() {
            var env = KANAPL();

            ok(env, "♪'765+346'", 1111);
        });

        it("format", function() {
            var env = KANAPL();

            ok(env, "◆765.346", ["7", "6", "5", ".", "3", "4", "6"]);
            ok(env, "(5 2)◆1.7 2.36 ￣4.92", [" ", "1", ".", "7", "0", " ", "2", ".", "3", "6", "￣", "4", ".", "9", "2"]);
            ok(env, "(8 ￣2)◆1.7 2.36 ￣4.92",
                [" ", " ", " ", "1", ".", "7", "E", "0", " ", " ", " ", "2", ".", "4", "E", "0", " ", " ", "￣", "4", ".", "9", "E", "0"]);
            ok(env, "(8 ￣2)◆7.65E27", [" ", " ", "7", ".", "7", "E", "2", "7"]);
        });

        it("variable name", function() {
            var env = KANAPL();

            ok(env, "A←1", 1);
            ok(env, "A01←1", 1);
            ok(env, "A△1←1", 1);
            ok(env, "あんぱんまん←1", 1);
            ok(env, "アンパンマン←1", 1);
            ok(env, "APL言語←1", 1);
            ok(env, "ＡＺａｚ０９ｦﾟ←1", 1);
            ok(env, "らき←2", 2);
            ok(env, "すた←8", 8);
            ok(env, "らき☆すた", 3);
        });
    });

    describe("syntax", function () {
        it("function precedence", function() {
            var env = KANAPL();

            ok(env, "2×3+4", 14);
            ok(env, "(2×3)+4", 10);
            ok(env, "!2×1+1", 24);
            ok(env, "(!2)×1+1", 4);
            ok(env, "7+6-5+2-7", 13);
            ok(env, "7+(6-5)+(2-7)", 3);
        });

        it("space", function() {
            var env = KANAPL();

            ok(env, "1 + 2", 3);
            ok(env, "( 3  3 ρ  7   6  5  )  [  2  ;  2 ]", 6);
            ok(env, "' 346 ' [2]", "3");
            ok(env, "♪  '   765  +  346  '", 1111);
            ok(env, "φ     1 2 3", [3, 2, 1]);
            ok(env, "φ   [   2    ]2 3 2ρ1 2 3 4 5 6", [[[5, 6], [3, 4], [1, 2]], [[5, 6], [3, 4], [1, 2]]]);
            ok(env, "1   φ    2", 2);
            ok(env, "1 2   φ   [   1   ]3 2ρ1 2 3 4 5 6", [[3, 6], [5, 2], [1, 4]]);
            ok(env, "3  /    2 2ρ1 2", [[1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2]]);
            ok(env, "3   /   [   1   ]   2 2ρ1 2", [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]])
            ok(env, "(1 0 1)   \\    2 2ρ1 2 3 4", [[1, 0, 2], [3, 0, 4]]);
            ok(env, "(1 0 1)   \\  [  1   ]   2 2ρ1 2 3 4", [[1, 2], [0, 0], [3, 4]]);
            ok(env, "(2 3ρ1 2 3)   ,   2 3ρ4 5 6", [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]);
            ok(env, "(2 3ρ1 2 3)   ,   [  1   ]   2 3ρ4 5 6", [[1, 2, 3], [1, 2, 3], [4, 5, 6], [4, 5, 6]]);
            ok(env, "1 2   ・.+   1 2", [[2, 3], [3, 4]]);
        });

        it("ascii", function() {
            var env = KANAPL();

            ok(env, "#~#2#*#3", -6);
            ok(env, "3#/#3", 1);
            ok(env, "3#max#5", 5);
            ok(env, "3#min#5", 3);
            ok(env, "2#**#3", 8);
            ok(env, "2#log#8", 3);
            ok(env, "1#tri#0", 0);
            ok(env, "1#>=#0", 1);
            ok(env, "1#<=#0", 0);
            ok(env, "1#!=#0", 1);
            ok(env, "1#and#0", 0);
            ok(env, "1#or#0", 1);
            ok(env, "1#nand#0", 1);
            ok(env, "1#nor#0", 0);
            ok(env, "2 3#outer#.#*#2 3", [[4, 6], [6, 9]]);
            ok(env, "2 2#rho#1 2 3 4", [[1, 2], [3, 4]]);
            ok(env, "2#take#1 2 3", [1, 2]);
            ok(env, "1#drop#1 2 3", [2, 3]);
            ok(env, "3#/-#2 2#rho#1 2", [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]])
            ok(env, "(1 0 1)#\\-#2 2#rho#1 2 3 4", [[1, 2], [0, 0], [3, 4]]);
            ok(env, "1#rotate#1 2 3", [2, 3, 1]);
            ok(env, "1 2#rotate1#3 2#rho#1 2 3 4 5 6", [[3, 6], [5, 2], [1, 4]]);
            ok(env, "2 1#transpose#3 3ρ1 2 3 4 5 6 7 8 9", [[1, 4, 7], [2, 5, 8], [3, 6, 9]]);
            ok(env, "#iota#3", [1, 2, 3]);
            ok(env, "2#in#2", 1);
            ok(env, "A#<-#30 50 10 90 70", [30, 50, 10, 90, 70]);
            ok(env, "#asc#A", [3, 1, 2, 5, 4]);
            ok(env, "#desc#A", [4, 5, 2, 1, 3]);
            okPrec(env, "#domino#2 2ρ3 1 5 2", 8, [[2, -1], [-5, 3]]);
            ok(env, "2 2 2 2#encode#15", [1, 1, 1, 1]);
            ok(env, "10#decode#7 6 5", 765);
            ok(env, "#eval#'765+346'", 1111);
            ok(env, "#tostring#765.346", ["7", "6", "5", ".", "3", "4", "6"]);
        });

        it("APL letter", function() {
            var env = KANAPL();

            ok(env, "A\u2206←\u00af1", -1);
            ok(env, "A△", -1);
            ok(env, "2 3\u2218.×2 3", [[4, 6], [6, 9]]);
            ok(env, "\u2223\u00af1", 1);
            ok(env, "\u223c1", 0);
            ok(env, "1\u22640", 0);
            ok(env, "1\u22650", 1);
            ok(env, "3\u23085", 5);
            ok(env, "3\u230a5", 3);
            ok(env, "2 2 2 2\u22a415", [1, 1, 1, 1]);
            ok(env, "2\u22c63", 8);
            okPrec(env, "\u23392 2\u23743 1 5 2", 8, [[2, -1], [-5, 3]]);
            ok(env, "1\u233d1 2 3", [2, 3, 1]);
            ok(env, "3\u233f2 2ρ1 2", [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]])
            ok(env, "2 1\u23493 3ρ1 2 3 4 5 6 7 8 9", [[1, 4, 7], [2, 5, 8], [3, 6, 9]]);
            ok(env, "A#<-#30 50 10 90 70", [30, 50, 10, 90, 70]);
            ok(env, "\u234bA", [3, 1, 2, 5, 4]);
            ok(env, "\u234e'765+346'", 1111);
            ok(env, "\u2352A", [4, 5, 2, 1, 3]);
            ok(env, "\u2355765.346", ["7", "6", "5", ".", "3", "4", "6"]);
            ok(env, "\u23583", 6);
            ok(env, "2\u235f8", 3);
            ok(env, "1\u23720", 1);
            ok(env, "1\u23710", 0);
            ok(env, "\u23733", [1, 2, 3]);
            ok(env, "2 2\u23741 2 3 4", [[1, 2], [3, 4]]);
        });

    });

    describe("empty array", function() {
        it("scalar function(monadic)", function() {
            var env = emptyEnv();

            ok(env, "-E", []);
            ok(env, "#*#E", []);
            ok(env, "#/#E", []);
            ok(env, "|E", []);
            ok(env, "#max#E", []);
            ok(env, "#min#E", []);
            ok(env, "#**#E", []);
            ok(env, "#log#E", []);
            ok(env, "#tri#E", []);
            ok(env, "?E", []);
            ok(env, "!E", []);
            ok(env, "~E", []);
        });

        it("scalar function(dyadic)", function() {
            var env = emptyEnv();

            ok(env, "1+E", []);
            ok(env, "1-E", []);
            ok(env, "1#*#E", []);
            ok(env, "1#/#E", []);
            ok(env, "1|E", []);
            ok(env, "1#max#E", []);
            ok(env, "1#min#E", []);
            ok(env, "1#**#E", []);
            ok(env, "2#log#E", []);
            ok(env, "1#tri#E", []);
            ok(env, "1!E", []);
            ok(env, "1<E", []);
            ok(env, "1>E", []);
            ok(env, "1#<=#E", []);
            ok(env, "1#>=#E", []);
            ok(env, "1=E", []);
            ok(env, "1#!=#E", []);
            ok(env, "1#and#E", []);
            ok(env, "1#or#E", []);
            ok(env, "1#nand#E", []);
            ok(env, "1#nor#E", []);
            ok(env, "E+1", []);
            ok(env, "E-1", []);
            ok(env, "1#*#E", []);
            ok(env, "1#/#E", []);
            ok(env, "E|1", []);
            ok(env, "1#max#E", []);
            ok(env, "1#min#E", []);
            ok(env, "1#**#E", []);
            ok(env, "2#log#E", []);
            ok(env, "1#tri#E", []);
            ok(env, "E!1", []);
            ok(env, "E<1", []);
            ok(env, "E>1", []);
            ok(env, "1#<=#E", []);
            ok(env, "1#>=#E", []);
            ok(env, "E=1", []);
            ok(env, "1#!=#E", []);
            ok(env, "1#and#E", []);
            ok(env, "1#or#E", []);
            ok(env, "1#nand#E", []);
            ok(env, "1#nor#E", []);
            ok(env, "E+E", []);
            ok(env, "E-E", []);
            ok(env, "E#*#E", []);
            ok(env, "E#/#E", []);
            ok(env, "E|E", []);
            ok(env, "E#max#E", []);
            ok(env, "E#min#E", []);
            ok(env, "E#**#E", []);
            ok(env, "2#log#E", []);
            ok(env, "E#tri#E", []);
            ok(env, "E!E", []);
            ok(env, "E<E", []);
            ok(env, "E>E", []);
            ok(env, "E#<=#E", []);
            ok(env, "E#>=#E", []);
            ok(env, "E=E", []);
            ok(env, "E#!=#E", []);
            ok(env, "E#and#E", []);
            ok(env, "E#or#E", []);
            ok(env, "E#nand#E", []);
            ok(env, "E#nor#E", []);
        });

        it("compound operator", function() {
            var env = emptyEnv();

            ok(env, "+/E", 0);
            ok(env, "-/E", 0);
            ok(env, "×/E", 0);
            ok(env, "÷/E", 0);
            ok(env, "|/E", 0);
            ok(env, "「/E", 0);
            ok(env, "」/E", 0);
            ok(env, "★/E", 0);
            ok(env, "〇/E", 0);
            ok(env, "☆/E", 0);
            ok(env, "!/E", 0);
            ok(env, "∧/E", 0);
            ok(env, "∨/E", 0);
            ok(env, "†/E", 0);
            ok(env, "‡/E", 0);
            ok(env, "</E", 0);
            ok(env, "≦/E", 0);
            ok(env, ">/E", 0);
            ok(env, "≧/E", 0);
            ok(env, "=/E", 0);
            ok(env, "≠/E", 0);
            ok(env, "+\\E", []);
            ok(env, "-\\E", []);
            ok(env, "×\\E", []);
            ok(env, "÷\\E", []);
            ok(env, "|\\E", []);
            ok(env, "「\\E", []);
            ok(env, "」\\E", []);
            ok(env, "★\\E", []);
            ok(env, "〇\\E", []);
            ok(env, "☆\\E", []);
            ok(env, "!\\E", []);
            ok(env, "∧\\E", []);
            ok(env, "∨\\E", []);
            ok(env, "†\\E", []);
            ok(env, "‡\\E", []);
            ok(env, "<\\E", []);
            ok(env, "≦\\E", []);
            ok(env, ">\\E", []);
            ok(env, "≧\\E", []);
            ok(env, "=\\E", []);
            ok(env, "≠\\E", []);
            ok(env, "E+.+E", 0);
            ok(env, "E+.-E", 0);
            ok(env, "E+.×E", 0);
            ok(env, "E+.÷E", 0);
            ok(env, "E+.|E", 0);
            ok(env, "E+.「E", 0);
            ok(env, "E+.」E", 0);
            ok(env, "E+.★E", 0);
            ok(env, "E+.〇E", 0);
            ok(env, "E+.☆E", 0);
            ok(env, "E+.!E", 0);
            ok(env, "E+.∧E", 0);
            ok(env, "E+.∨E", 0);
            ok(env, "E+.†E", 0);
            ok(env, "E+.‡E", 0);
            ok(env, "E+.<E", 0);
            ok(env, "E+.≦E", 0);
            ok(env, "E+.>E", 0);
            ok(env, "E+.≧E", 0);
            ok(env, "''+.=''", 0);
            ok(env, "''+.≠''", 0);
            ok(env, "E-.+E", 0);
            ok(env, "E×.+E", 0);
            ok(env, "E÷.+E", 0.0);
            ok(env, "E|.+E", 0);
            ok(env, "E「.+E", 0);
            ok(env, "E」.+E", 0);
            ok(env, "E★.+E", 0);
            ok(env, "E〇.+E", 0);
            ok(env, "E☆.+E", 0);
            ok(env, "E!.+E", 0);
            ok(env, "E∧.+E", 0);
            ok(env, "E∨.+E", 0);
            ok(env, "E†.+E", 0);
            ok(env, "E‡.+E", 0);
            ok(env, "E<.+E", 0);
            ok(env, "E≦.+E", 0);
            ok(env, "E>.+E", 0);
            ok(env, "E≧.+E", 0);
            ok(env, "E=.+E", 0);
            ok(env, "E≠.+E", 0);
            ok(env, "E・.+E", []);
            ok(env, "E・.-E", []);
            ok(env, "E・.×E", []);
            ok(env, "E・.÷E", []);
            ok(env, "E・.|E", []);
            ok(env, "E・.「E", []);
            ok(env, "E・.」E", []);
            ok(env, "E・.★E", []);
            ok(env, "E・.〇E", []);
            ok(env, "E・.☆E", []);
            ok(env, "E・.!E", []);
            ok(env, "E・.∧E", []);
            ok(env, "E・.∨E", []);
            ok(env, "E・.†E", []);
            ok(env, "E・.‡E", []);
            ok(env, "E・.<E", []);
            ok(env, "E・.≦E", []);
            ok(env, "E・.>E", []);
            ok(env, "E・.≧E", []);
            ok(env, "E・.=E", []);
            ok(env, "E・.≠E", []);
        });

        it("mixed operator", function() {
            var env = emptyEnv();

            ok(env, "#rho#E", 0);
            ok(env, ",E", []);
            ok(env, "E,E", []);
            ok(env, "2 3,E", [2, 3]);
            ok(env, "E,2 3", [2, 3]);
            ok(env, "2 2#rho#1 2 3 4,E", [[1, 2], [3, 4]]);
            ok(env, "E,2 2#rho#1 2 3 4", [[1, 2], [3, 4]]);
            ok(env, "E/E", []);
            ok(env, "E\\E", []);
            ok(env, "#rotate#E", []);
            ok(env, "2#rotate#E", []);
            ok(env, "#transpose#E", []);
            ok(env, "1 2#iota#E", []);
            ok(env, "E#iota#2 2#rho#1 2 3 4", [[1, 1], [1, 1]]);
            ok(env, "1 2#in#E", [0, 0]);
            ok(env, "E#in#2 2#rho#1 2 3 4", []);
            ok(env, "#asc#E", []);
            ok(env, "#desc#E", []);
            ok(env, "#tostring#''", []);
        });
    });
});

